@model CreateOrderViewModel

@{
    Layout = "~/Views/Shared/_Index.cshtml";

    ViewData["Title"] = "Create Order";
}
<link rel="stylesheet" href="~/css/Style.css" />
<h2>Create Order</h2>

<form asp-action="CreateOrder" method="post">
    <div class="form-group">
        <label>Shipping Address</label>
        <input asp-for="@Model.Order.ShippingAddress" class="form-control" />
    </div>

    <div class="form-group">
        <label>Payment Method</label>
        <select asp-for="@Model.Order.PaymentMethod" class="form-control">
            <option disabled selected value="">-- Select a Payment Method --</option>
            @foreach (var item in Model.PaymentMethods)
            {
                <option value="@item">@item.ToString()</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Status</label>
        <select asp-for="@Model.Order.Status" class="form-control">
            <option disabled selected value="">-- Select order status --</option>
            @foreach (var item in Model.OrderStatuses)
            {
                <option value="@item">@item.ToString()</option>
            }
        </select>
    </div>

    @* <h4>Order Items</h4> *@

    @* <!-- Hidden master select used for cloning --> *@
    @* <select id="product-select-master" class="d-none"> *@
    @*     <option disabled selected value="">-- Select a Product --</option> *@
    @*     @foreach (var p in Model.Products) *@
    @*     { *@
    @*         <option value="@p.ProductId" data-imageurl="@p.ImageUrl">@p.Name</option> *@
    @*     } *@
    @* </select> *@
    <div class="form-group">
        <label>Order Items</label>
        <!-- Hidden master select used for cloning -->
        <select id="product-select-master" class="form-control d-none">
            <option disabled selected value="">-- Select a Product --</option>
            @foreach (var p in Model.Products)
            {
                <option value="@p.ProductId" data-imageurl="@p.ImageUrl">@p.Name</option>
            }
        </select>
    </div>

    <div id="order-items-container"></div>

    <div class="order-buttons-row">
        <button type="button" id="add-item-btn" class="btn btn-success">Add Order Item</button>
        <button type="submit" class="btn btn-success">Place Order</button>
    </div>

</form>

@section Scripts {
    <script>
        let index = 0;

        function addOrderItem() {
            const container = document.getElementById("order-items-container");

            const card = document.createElement("div");
            card.className = "card mb-3 p-3 border shadow-sm bg-light";
            card.setAttribute("data-index", index);

            // Clone the hidden master product select
            const productSelect = document.getElementById("product-select-master").cloneNode(true);
            productSelect.classList.remove("d-none");
            productSelect.classList.add("form-control");
            productSelect.name = `Order.OrderItems[${index}].ProductId`;
            productSelect.id = `Order_OrderItems_${index}__ProductId`;

            // Quantity input
            const quantityInput = document.createElement("input");
            quantityInput.type = "number";
            quantityInput.className = "form-control";
            quantityInput.name = `Order.OrderItems[${index}].Quantity`;
            quantityInput.id = `Order_OrderItems_${index}__Quantity`;

            // Hidden ImageUrl input
            const imageInput = document.createElement("input");
            imageInput.type = "hidden";
            imageInput.name = `Order.OrderItems[${index}].ImageUrl`;
            imageInput.id = `Order_OrderItems_${index}__ImageUrl`;

            // When product changes, update the hidden image URL
            productSelect.addEventListener("change", function () {
                const selected = this.selectedOptions[0];
                imageInput.value = selected?.dataset.imageurl ?? "";
            });

            // Remove button
            const removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.className = "btn btn-danger mt-2";
            removeBtn.innerHTML = "Remove";
            removeBtn.addEventListener("click", function () {
                card.remove();
                renumberItems();
            });

            card.innerHTML = `<h5 class="card-title">Order Item ${index + 1}</h5>`;

            const productGroup = document.createElement("div");
            productGroup.className = "form-group mb-2";
            const productLabel = document.createElement("label");
            productLabel.htmlFor = productSelect.id;
            productLabel.textContent = "Product";
            productGroup.appendChild(productLabel);
            productGroup.appendChild(productSelect);

            const quantityGroup = document.createElement("div");
            quantityGroup.className = "form-group mb-2";
            const quantityLabel = document.createElement("label");
            quantityLabel.htmlFor = quantityInput.id;
            quantityLabel.textContent = "Quantity";
            quantityGroup.appendChild(quantityLabel);
            quantityGroup.appendChild(quantityInput);

            card.appendChild(productGroup);
            card.appendChild(quantityGroup);
            card.appendChild(imageInput);
            card.appendChild(removeBtn);

            container.appendChild(card);
            index++;
        }

        function renumberItems() {
            const cards = document.querySelectorAll("#order-items-container .card");
            index = 0;
            cards.forEach(card => {
                card.setAttribute("data-index", index);
                card.querySelector(".card-title").textContent = `Order Item ${index + 1}`;
                const inputs = card.querySelectorAll("select, input");
                inputs.forEach(input => {
                    const match = input.name.match(/Order\.OrderItems\[\d+\]\.(\w+)/);
                    if (!match) return;
                    const field = match[1];
                    input.name = `Order.OrderItems[${index}].${field}`;
                    input.id = `Order_OrderItems_${index}__${field}`;
                    if (input.labels && input.labels.length > 0) {
                        input.labels[0].setAttribute("for", input.id);
                    }
                });
                index++;
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("add-item-btn").addEventListener("click", addOrderItem);
            addOrderItem(); // one by default
        });
    </script>
}
